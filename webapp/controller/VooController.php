<?php

use ArmoredCore\Controllers\BaseController;
use ArmoredCore\Interfaces\ResourceControllerInterface;
use ArmoredCore\WebObjects\Post;
use ArmoredCore\WebObjects\Redirect;
use ArmoredCore\WebObjects\View;

/**
 * CRUD Resource Controller for ActiveRecord Model Voo
 *
 * Code generated by WebLogicMVC Code Builder
 *
 * Date: 2021-06-02
 *
 * WL Code Builder developed by SÃ­lvio Priem Mendes
 * *
 */
class VooController extends BaseAuthController implements ResourceControllerInterface
{
    /**
     * Returns index view with all records
     */
    public function index()
    {
        $role = AuthManager::getLoggedRole();

        //ir buscar valores
        $voos = Voo::all();
        $escalas = Escala::all();
        $aeroportos = Aeroporto::all();

        //instanciar classe
        $Voo = new Voo();

        //definir custos do voo e aeroportos

        foreach($voos as $voo)
        {
            foreach($escalas as $escala)
            {
                if($voo->id == $escala->idvoo)
                {
                    $voo->precovenda = $Voo->CalcularTotal($escalas, $voo->id);
                    $voo->idaeroportoorigem = $Voo->DefinirAeroportoOrigem($escalas, $voo->id);
                    $voo->idaeroportodestino = $Voo->DefinirAeroportoDestino($escalas, $voo->id);
                    $voo->save();
                }
                else
                {

                }
            }
        }

        switch ($role)
        {
            case 'operadorcheckin':
                return View::make('voocheckin.index', ['voos' => $voos, 'aeroportos' => $aeroportos, 'escalas' => $escalas]);
                break;

            case 'gestorvoo':
                return View::make('voo.index', ['voos' => $voos, 'aeroportos' => $aeroportos, 'escalas' => $escalas]);
                break;

            case 'passageiro':
                return View::make('voopassageiro.index', ['voos' => $voos, 'aeroportos' => $aeroportos, 'escalas' => $escalas]);
                break;

            default:
                return View::make('login.getlogin');
        }
    }


    public function create()
    {
        return View::make('voo.create');
    }



    public function store()
    {


        $voo = new Voo(Post::getAll());

        if($voo->is_valid()){
            $voo->save();
            Redirect::toRoute('voo/index');
        } else {
            //redirect to form with data and errors
            Redirect::flashToRoute('voo/create', ['voo' => $voo]);
        }
    }


    public function show($id)
    {
        $voo = Voo::find([$id]);

        if (is_null($voo)) {
            //TODO redirect to standard error page
            return View::make('voo.index');
        } else {
            return View::make('voo.show', ['voo' => $voo]);
        }
    }



    public function edit($id)
    {
        $voo = Voo::find([$id]);

        if (is_null($voo)) {
            //TODO redirect to standard error page
        } else {
            return View::make('voo.edit', ['voo' => $voo]);
        }
    }



    public function update($id)
    {

        $voo = Voo::find([$id]);
        $voo->update_attributes(Post::getAll());

        if($voo->is_valid()){
            $voo->save();
            Redirect::toRoute('voo/index');
        } else {
            //redirect to form with data and errors
            Redirect::flashToRoute('voo/edit', ['voo' => $voo]);
        }
    }


    public function destroy($id)
    {

        $voo = voo::find([$id]);

        $escalas = Escala::all();



        foreach ($escalas as $escala)
        {
            if($escala->idvoo == $voo->id)
            {
                $escala->delete();
            }
        }

        $voo->delete();
        Redirect::toRoute('voo/index');
    }
}